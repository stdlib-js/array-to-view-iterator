{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isFunction from '@stdlib/assert-is-function';\nimport isCollection from '@stdlib/assert-is-collection';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iterates over each element in an array-like object view.\n*\n* @param {Collection} src - input value\n* @param {integer} [begin=0] - starting index (inclusive)\n* @param {integer} [end=src.length] - ending index (non-inclusive)\n* @param {Function} [mapFcn] - function to invoke for each iterated value\n* @param {*} [thisArg] - execution context\n* @throws {TypeError} first argument must be an array-like object\n* @throws {TypeError} second argument must be either an integer (starting index) or a function\n* @throws {TypeError} third argument must be either an integer (ending index) or a function\n* @throws {TypeError} fourth argument must be a function\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = arrayview2iterator( [ 1, 2, 3, 4 ], 1, 3 );\n*\n* var v = iter.next().value;\n* // returns 2\n*\n* v = iter.next().value;\n* // returns 3\n*\n* var bool = iter.next().done;\n* // returns true\n*/\nfunction arrayview2iterator( src ) {\n\tvar thisArg;\n\tvar begin;\n\tvar nargs;\n\tvar iter;\n\tvar FLG;\n\tvar fcn;\n\tvar end;\n\tvar get;\n\tvar i;\n\tif ( !isCollection( src ) ) {\n\t\tthrow new TypeError( format( '00s2a', src ) );\n\t}\n\tnargs = arguments.length;\n\tif ( nargs === 1 ) {\n\t\tbegin = 0;\n\t\tend = src.length;\n\t} else if ( nargs === 2 ) {\n\t\tif ( isFunction( arguments[ 1 ] ) ) {\n\t\t\tbegin = 0;\n\t\t\tfcn = arguments[ 1 ];\n\t\t} else {\n\t\t\tbegin = arguments[ 1 ];\n\t\t}\n\t\tend = src.length;\n\t} else if ( nargs === 3 ) {\n\t\tif ( isFunction( arguments[ 1 ] ) ) {\n\t\t\tbegin = 0;\n\t\t\tend = src.length;\n\t\t\tfcn = arguments[ 1 ];\n\t\t\tthisArg = arguments[ 2 ];\n\t\t} else if ( isFunction( arguments[ 2 ] ) ) {\n\t\t\tbegin = arguments[ 1 ];\n\t\t\tend = src.length;\n\t\t\tfcn = arguments[ 2 ];\n\t\t} else {\n\t\t\tbegin = arguments[ 1 ];\n\t\t\tend = arguments[ 2 ];\n\t\t}\n\t} else { // nargs >= 4\n\t\tbegin = arguments[ 1 ];\n\t\tend = arguments[ 2 ];\n\t\tfcn = arguments[ 3 ];\n\t\tif ( !isFunction( fcn ) ) {\n\t\t\tthrow new TypeError( format( '00s3E', fcn ) );\n\t\t}\n\t\tthisArg = arguments[ 4 ];\n\t}\n\tif ( !isInteger( begin ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either an integer (starting index) or a function. Value: `%s`.', begin ) );\n\t}\n\tif ( !isInteger( end ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be either an integer (ending index) or a function. Value: `%s`.', end ) );\n\t}\n\tif ( end < 0 ) {\n\t\tend = src.length + end;\n\t\tif ( end < 0 ) {\n\t\t\tend = 0;\n\t\t}\n\t} else if ( end > src.length ) {\n\t\tend = src.length;\n\t}\n\tif ( begin < 0 ) {\n\t\tbegin = src.length + begin;\n\t\tif ( begin < 0 ) {\n\t\t\tbegin = 0;\n\t\t}\n\t}\n\ti = begin - 1;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tif ( fcn ) {\n\t\tsetReadOnly( iter, 'next', next1 );\n\t} else {\n\t\tsetReadOnly( iter, 'next', next2 );\n\t}\n\tsetReadOnly( iter, 'return', finish );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\t// Resolve an accessor for retrieving array elements (e.g., to accommodate `Complex64Array`, etc):\n\tget = arraylike2object( src ).getter;\n\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next1() {\n\t\ti += 1;\n\t\tif ( FLG || i >= end ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': fcn.call( thisArg, get( src, i ), i, i-begin, src ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next2() {\n\t\ti += 1;\n\t\tif ( FLG || i >= end ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': get( src, i ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction finish( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\tif ( fcn ) {\n\t\t\treturn arrayview2iterator( src, begin, end, fcn, thisArg );\n\t\t}\n\t\treturn arrayview2iterator( src, begin, end );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default arrayview2iterator;\n"],"names":["arrayview2iterator","src","thisArg","begin","nargs","iter","FLG","fcn","end","get","i","isCollection","TypeError","format","arguments","length","isFunction","isInteger","setReadOnly","next1","next2","finish","iteratorSymbol","factory","arraylike2object","getter","done","value","call"],"mappings":";;spBA2DA,SAASA,EAAoBC,GAC5B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMC,EAAcV,GACnB,MAAM,IAAIW,UAAWC,EAAQ,QAASZ,IAGvC,GAAe,KADfG,EAAQU,UAAUC,QAEjBZ,EAAQ,EACRK,EAAMP,EAAIc,YACJ,GAAe,IAAVX,EACNY,EAAYF,UAAW,KAC3BX,EAAQ,EACRI,EAAMO,UAAW,IAEjBX,EAAQW,UAAW,GAEpBN,EAAMP,EAAIc,YACJ,GAAe,IAAVX,EACNY,EAAYF,UAAW,KAC3BX,EAAQ,EACRK,EAAMP,EAAIc,OACVR,EAAMO,UAAW,GACjBZ,EAAUY,UAAW,IACVE,EAAYF,UAAW,KAClCX,EAAQW,UAAW,GACnBN,EAAMP,EAAIc,OACVR,EAAMO,UAAW,KAEjBX,EAAQW,UAAW,GACnBN,EAAMM,UAAW,QAEZ,CAIN,GAHAX,EAAQW,UAAW,GACnBN,EAAMM,UAAW,IAEXE,EADNT,EAAMO,UAAW,IAEhB,MAAM,IAAIF,UAAWC,EAAQ,QAASN,IAEvCL,EAAUY,UAAW,EACrB,CACD,IAAMG,EAAWd,GAChB,MAAM,IAAIS,UAAWC,EAAQ,2GAA4GV,IAE1I,IAAMc,EAAWT,GAChB,MAAM,IAAII,UAAWC,EAAQ,wGAAyGL,IAkCvI,OAhCKA,EAAM,GACVA,EAAMP,EAAIc,OAASP,GACR,IACVA,EAAM,GAEIA,EAAMP,EAAIc,SACrBP,EAAMP,EAAIc,QAENZ,EAAQ,IACZA,EAAQF,EAAIc,OAASZ,GACR,IACZA,EAAQ,GAGVO,EAAIP,EAAQ,EAKXe,EAFDb,EAAO,CAAA,EAEa,OADfE,EACuBY,EAEAC,GAE5BF,EAAab,EAAM,SAAUgB,GAGxBC,GACJJ,EAAab,EAAMiB,EAAgBC,GAGpCd,EAAMe,EAAkBvB,GAAMwB,OAEvBpB,EAQP,SAASc,IAER,OADAT,GAAK,EACAJ,GAAOI,GAAKF,EACT,CACNkB,MAAQ,GAGH,CACNC,MAASpB,EAAIqB,KAAM1B,EAASO,EAAKR,EAAKS,GAAKA,EAAGA,EAAEP,EAAOF,GACvDyB,MAAQ,EAET,CAQD,SAASN,IAER,OADAV,GAAK,EACAJ,GAAOI,GAAKF,EACT,CACNkB,MAAQ,GAGH,CACNC,MAASlB,EAAKR,EAAKS,GACnBgB,MAAQ,EAET,CASD,SAASL,EAAQM,GAEhB,OADArB,GAAM,EACDQ,UAAUC,OACP,CACNY,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,EAET,CAQD,SAASH,IACR,OAAKhB,EACGP,EAAoBC,EAAKE,EAAOK,EAAKD,EAAKL,GAE3CF,EAAoBC,EAAKE,EAAOK,EACvC,CACF"}